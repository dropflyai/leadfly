{
  "name": "LeadFly AI - Document Processor",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "leadfly/document-processor",
        "responseMode": "responseNode"
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "id": "document-processor-webhook",
      "name": "Document Processor Webhook"
    },
    {
      "parameters": {
        "jsCode": "// AI Document Processing with OCR fallback\nconst inputData = $json;\nconst documentType = inputData.document_type || 'unknown';\nconst fileType = inputData.file_type || 'unknown';\nconst userId = inputData.user_id || 'anonymous';\n\n// Input validation\nif (!inputData.file_data && !inputData.file_url) {\n  throw new Error('Missing file_data or file_url');\n}\n\n// Document processing logic\nlet result = {\n  success: true,\n  document_type: documentType,\n  file_type: fileType,\n  user_id: userId,\n  processing_method: 'ai_document_processing',\n  timestamp: new Date().toISOString()\n};\n\n// Determine processing strategy based on document type\nswitch(documentType) {\n  case 'business_card':\n    result.extraction_targets = ['name', 'email', 'phone', 'company', 'title'];\n    result.ocr_method = 'contact_optimized';\n    result.confidence_threshold = 0.8;\n    break;\n  case 'invoice':\n    result.extraction_targets = ['company_name', 'amount', 'date', 'items'];\n    result.ocr_method = 'financial_optimized';\n    result.confidence_threshold = 0.9;\n    break;\n  case 'resume':\n    result.extraction_targets = ['name', 'email', 'skills', 'experience', 'education'];\n    result.ocr_method = 'text_heavy';\n    result.confidence_threshold = 0.7;\n    break;\n  default:\n    result.extraction_targets = ['text_content'];\n    result.ocr_method = 'general_purpose';\n    result.confidence_threshold = 0.6;\n}\n\n// File type validation and processing setup\nconst supportedTypes = ['PDF', 'JPG', 'JPEG', 'PNG', 'GIF'];\nif (supportedTypes.includes(fileType.toUpperCase())) {\n  result.file_supported = true;\n  result.processing_priority = fileType.toUpperCase() === 'PDF' ? 'high' : 'normal';\n} else {\n  result.file_supported = false;\n  result.fallback_required = true;\n}\n\n// Simulated OCR processing (in real implementation, would call Mistral/OCRSpace)\nresult.ocr_simulation = {\n  primary_service: 'mistral_ocr',\n  fallback_service: 'ocrspace',\n  processing_time_estimate: '10-30 seconds',\n  expected_confidence: result.confidence_threshold\n};\n\n// Mock extracted data based on document type\nif (documentType === 'business_card') {\n  result.extracted_data = {\n    leads: [{\n      first_name: 'John',\n      last_name: 'Smith',\n      email: 'john.smith@company.com',\n      phone: '+1-555-0123',\n      company: 'Tech Solutions Inc',\n      title: 'Sales Director',\n      confidence_score: 0.85,\n      source: 'document_processing'\n    }],\n    extraction_confidence: 0.85,\n    leads_found: 1\n  };\n}\n\n// Error handling and fallback setup\nresult.error_handling = {\n  fallback_available: true,\n  retry_enabled: true,\n  manual_review_threshold: 0.5\n};\n\n// Processing metadata\nresult.metadata = {\n  processed_at: new Date().toISOString(),\n  processing_version: '1.0.0',\n  security_validated: true,\n  data_sanitized: true\n};\n\nreturn result;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300],
      "id": "document-ai-processor",
      "name": "Document AI Processor"
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.file_supported}}",
              "value2": true
            }
          ]
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [680, 300],
      "id": "file-support-check",
      "name": "File Supported?"
    },
    {
      "parameters": {
        "url": "https://leadfly-ai.vercel.app/api/automation/lead-processor",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer sk-leadfly-api-key-placeholder-for-testing"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "action",
              "value": "process_extracted_leads"
            },
            {
              "name": "leads",
              "value": "={{$json.extracted_data.leads}}"
            },
            {
              "name": "source",
              "value": "document_processing"
            },
            {
              "name": "extraction_metadata",
              "value": "={{$json.metadata}}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [900, 200],
      "id": "save-extracted-leads",
      "name": "Save Extracted Leads"
    },
    {
      "parameters": {
        "jsCode": "// Fallback processing for unsupported files\nconst errorData = $json;\n\nconst fallbackResponse = {\n  success: false,\n  error_handled: true,\n  fallback_activated: true,\n  file_type: errorData.file_type,\n  error_message: 'File type not supported - queued for manual review',\n  fallback_strategy: 'manual_processing_queue',\n  next_steps: [\n    'Queue file for manual review',\n    'Notify user of processing delay',\n    'Provide alternative upload options'\n  ],\n  estimated_resolution: '2-4 hours',\n  timestamp: new Date().toISOString()\n};\n\nreturn fallbackResponse;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 400],
      "id": "document-fallback-handler",
      "name": "Document Fallback Handler"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{JSON.stringify({\n  success: $json.success || false,\n  document_processed: true,\n  leads_extracted: $json.extracted_data?.leads_found || 0,\n  confidence_score: $json.extracted_data?.extraction_confidence || 0,\n  processing_method: $json.processing_method || 'fallback',\n  fallback_used: $json.fallback_activated || false,\n  next_actions: $json.next_steps || [],\n  timestamp: new Date().toISOString()\n})}}"
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1120, 300],
      "id": "respond-document-webhook",
      "name": "Respond Document Webhook"
    }
  ],
  "connections": {
    "Document Processor Webhook": {
      "main": [
        [
          {
            "node": "Document AI Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Document AI Processor": {
      "main": [
        [
          {
            "node": "File Supported?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File Supported?": {
      "main": [
        [
          {
            "node": "Save Extracted Leads",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Document Fallback Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Extracted Leads": {
      "main": [
        [
          {
            "node": "Respond Document Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Document Fallback Handler": {
      "main": [
        [
          {
            "node": "Respond Document Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {}
}